//******************************************************************************
// Project:       SANE-tools for Kylix
//
// Module:        QSane
// Description:   Contains Scanner component and a procedure for
//                the conversion of the scanned data to a bitmap 
//
// Copyright:     2003, Christoph Federer
// Homepage:      http://www.rolbox.it/der-hammer
// E-Mail:        christoph.federer@tin.it
//
// Version:       0.9
//
// This file may be distributed and/or modified under the terms of the GNU
// General Public License (GPL) version 2 as published by the Free Software
// Foundation
//
// History:
//
//******************************************************************************
unit QSaneTool;

{$MODE DELPHI}

interface

uses
  SysUtils, Classes, Types, Graphics,
  sanelib, SaneTool, IntfGraphics, GraphType;

type
  TScanner=class(TComponent)
  private
    FSaneClient: TSaneClient;
    FBlockingMode: boolean;

    FOnBeforeOpen:TNotifyEvent;
    FOnAfterOpen:TNotifyEvent;
    FOnBeforeClose:TNotifyEvent;
    FOnAfterClose:TNotifyEvent;

    FOnBeginScan: TNotifyEvent;
    FOnFinishedScan: TNotifyEvent;
    FOnScanProgress: TScanProgressEvent;

    FOnSaveOption: TSaveOptionEvent;
    function GetDeviceList: TStrings;
    function GetOptionGroupCount: integer;
    function GetOptionGroup(Index: Cardinal): TSaneOptionGroup;
    function GetFrameParams:TFrameParams;
    function GetHandle: TSANE_Handle;
    function GetIsScanning: boolean;
    function GetIsInBlockingMode: boolean;
    procedure SetBlockingMode(Value: boolean);
    function GetDevStatus: TSANE_Status;
    function GetStdOptions: TSaneStandardOptions;
    procedure SetOnBeginScan(Value: TNotifyEvent);
    procedure SetOnFinishedScan(Value: TNotifyEvent);
    procedure SetOnScanProgress(Value: TScanProgressEvent);
    procedure SetOnOpenClose(Index:integer; Value:TNotifyEvent);
    function GetSuccessfulScanned:boolean;

    procedure SetOnSaveOption(Value: TSaveOptionEvent);
    function GetDevice:PSaneDevice;
    function GetDevIndex:integer;
  protected
    procedure Loaded; override;
  public
    //constructor + destructor
    constructor Create(AOwner:TComponent); override;
    destructor Destroy; override;
    // Klassenmethoden
    class procedure UpdateDeviceList;
    class function Initialized:boolean;
    class function SaneVersion:integer;
    class function SaneVersionAsString:string;
    // Objektmethoden
    procedure Open(Index:integer=0); overload;
    procedure Open(DeviceName:string); overload;
    procedure Reset; //Gerät schließen und neue öffnen
    procedure Close;
    function IsOpen:boolean;

    procedure ScanImage;
    procedure Cancel;

    procedure StartScan;
    function ScanNext:boolean;
    procedure CloseScan;
    function HasData:boolean;

    function OptionByName(OptionName:string):TSaneOption;
    function OptionByNr(OptionNr:integer):TSaneOption;
    function OptionsModified:boolean;
    procedure ResetModified;
    procedure SaveOptions(SaveAll:boolean; ResetModifiedFlag:boolean=false);
    procedure SetOptionValue(OptionName, Value:string); overload;
    procedure SetOptionValue(OptionNr:integer; Value:string); overload;
    // Eigenschaften
    property SaneClient:TSaneClient read FSaneClient;

    property Handle:TSANE_Handle read GetHandle;
    property Device:PSaneDevice read GetDevice;
    property DevIndex:integer read GetDevIndex;

    property DeviceList:TStrings read GetDeviceList;
    property OptionGroupCount:integer read GetOptionGroupCount;
    property OptionGroup[Index:Cardinal]:TSaneOptionGroup read GetOptionGroup;
    property FrameParams:TFrameParams read GetFrameParams;

    property IsScanning:boolean read GetIsScanning;
    property IsInBlockingMode:boolean read GetIsInBlockingMode;
    property Status:TSANE_Status read GetDevStatus;
    property SuccessfulScanned:boolean read GetSuccessfulScanned;

    property StdOptions:TSaneStandardOptions read GetStdOptions;
    //Ereignisse & Methodenzeiger
  published
    property BlockingMode:boolean read FBlockingMode write SetBlockingMode default false;

    property OnBeforeOpen:TNotifyEvent index 1 read FOnBeforeOpen write SetOnOpenClose;
    property OnAfterOpen:TNotifyEvent index 2  read FOnAfterOpen write SetOnOpenClose;
    property OnBeforeClose:TNotifyEvent index 3  read FOnBeforeClose write SetOnOpenClose;
    property OnAfterClose:TNotifyEvent index 4  read FOnAfterClose write SetOnOpenClose;

    property OnBeginScan:TNotifyEvent read FOnBeginScan write SetOnBeginScan;
    property OnScanProgress:TScanProgressEvent read FOnScanProgress write SetOnScanProgress;
    property OnFinishedScan:TNotifyEvent read FOnFinishedScan write SetOnFinishedScan;

    property OnSaveOption:TSaveOptionEvent read FOnSaveOption write SetOnSaveOption;
  end;


procedure DrawScanData(ScanData:TScanData; Bitmap:TBitmap);

procedure Register;

implementation

//TScanner: constructor&destructor
constructor TScanner.Create(AOwner:TComponent);
begin
  inherited;
  if not (csDesigning in ComponentState) then
    FSaneClient:=TSaneClient.Create;
end;

destructor TScanner.Destroy;
begin
  FSaneClient.Free;
  inherited;
end;

//TScanner: private-Methoden
function TScanner.GetDeviceList: TStrings;
begin
  result:=TSaneClient.DeviceList;
end;

function TScanner.GetOptionGroupCount: integer;
begin
  result:=FSaneClient.OptionGroupCount;
end;

function TScanner.GetOptionGroup(Index: Cardinal): TSaneOptionGroup;
begin
  result:=FSaneClient.OptionGroup[Index];
end;

function TScanner.GetFrameParams:TFrameParams;
begin
  result:=FSaneClient.FrameParams;
end;

function TScanner.GetHandle: TSANE_Handle;
begin
  result:=FSaneClient.Handle;
end;

function TScanner.GetIsScanning: boolean;
begin
  result:=FSaneClient.IsScanning;
end;

function TScanner.GetIsInBlockingMode: boolean;
begin
  result:=FSaneClient.IsInBlockingMode;
end;

procedure TScanner.SetBlockingMode(Value: boolean);
begin
  FBlockingMode:=Value;
  if assigned(FSaneClient) then
    FSaneClient.BlockingMode:=Value;
end;

function TScanner.GetDevStatus: TSANE_Status;
begin
  result:=FSaneClient.Status;
end;

function TScanner.GetStdOptions: TSaneStandardOptions;
begin
  result:=FSaneClient.StdOptions;
end;

procedure TScanner.SetOnBeginScan(Value: TNotifyEvent);
begin
  FOnBeginScan:=Value;
  if assigned(FSaneClient) then
    FSaneClient.OnBeginScan:=Value;
end;

procedure TScanner.SetOnFinishedScan(Value: TNotifyEvent);
begin
  FOnFinishedScan:=Value;
  if assigned(FSaneClient) then
    FSaneClient.OnFinishedScan:=Value;
end;

procedure TScanner.SetOnScanProgress(Value: TScanProgressEvent);
begin
  FOnScanProgress:=Value;
  if assigned(FSaneClient) then
    FSaneClient.OnScanProgress:=Value;
end;

procedure TScanner.SetOnOpenClose(Index:integer; Value:TNotifyEvent);
begin
  case Index of
    1 :
    begin
      FOnBeforeOpen:=Value;
      if assigned(FSaneClient) then
        FSaneClient.OnBeforeOpen:=Value;
    end;
    2 :
    begin
      FOnAfterOpen:=Value;
      if assigned(FSaneClient) then
        FSaneClient.OnAfterOpen:=Value;
    end;
    3 :
    begin
      FOnBeforeClose:=Value;
      if assigned(FSaneClient) then
        FSaneClient.OnBeforeClose:=Value;
    end;
    4 :
    begin
      FOnAfterClose:=Value;
      if assigned(FSaneClient) then
        FSaneClient.OnAfterClose:=Value;
    end;
  else
    assert(false);
  end;
end;

function TScanner.GetSuccessfulScanned:boolean;
begin
  result:=FSaneClient.SuccessfulScanned;
end;

procedure TScanner.SetOnSaveOption(Value: TSaveOptionEvent);
begin
  FOnSaveOption:=Value;
  if assigned(FSaneClient) then
    FSaneClient.OnSaveOption:=Value;
end;

function TScanner.GetDevice:PSaneDevice;
begin
  result:=FSaneClient.Device;
end;

function TScanner.GetDevIndex:integer;
begin
  result:=FSaneClient.DevIndex;
end;

//TScanner: protected-Methoden
procedure TScanner.Loaded;
begin
  inherited;
end;

//TScanner: public-Methoden
// Klassenmethoden
class procedure TScanner.UpdateDeviceList;
begin
  TSaneClient.UpdateDeviceList;
end;

class function TScanner.Initialized:boolean;
begin
  result:=TSaneClient.Initialized;
end;

class function TScanner.SaneVersion:integer;
begin
  result:=TSaneClient.SaneVersion;
end;

class function TScanner.SaneVersionAsString:string;
begin
  result:=TSaneClient.SaneVersionAsString;
end;

// Objektmethoden
procedure TScanner.Open(Index:integer=0);
begin
  FSaneClient.Open(Index);
end;

procedure TScanner.Open(DeviceName:string);
begin
  FSaneClient.Open(DeviceName);
end;

procedure TScanner.Reset;
begin
  FSaneClient.Reset;
end;

procedure TScanner.Close;
begin
  FSaneClient.Close;
end;

function TScanner.IsOpen:boolean;
begin
  result:=FSaneClient.IsOpen;
end;

procedure TScanner.ScanImage;
begin
  FSaneClient.ScanImage;
end;

procedure TScanner.Cancel;
begin
  FSaneClient.Cancel;
end;

procedure TScanner.StartScan;
begin
  FSaneClient.StartScan;
end;

function TScanner.ScanNext:boolean;
begin
  result:=FSaneClient.ScanNext;
end;

procedure TScanner.CloseScan;
begin
  FSaneClient.CloseScan;
end;

function TScanner.HasData:boolean;
begin
   result:=FSaneClient.HasData;
end;

function TScanner.OptionByName(OptionName:string):TSaneOption;
begin
  result:=FSaneClient.OptionByName(OptionName);
end;

function TScanner.OptionByNr(OptionNr:integer):TSaneOption;
begin
  result:=FSaneClient.OptionByNr(OptionNr);
end;

function TScanner.OptionsModified:boolean;
begin
  result:=FSaneClient.OptionsModified;
end;

procedure TScanner.ResetModified;
begin
  FSaneClient.ResetModified;
end;

procedure TScanner.SaveOptions(SaveAll:boolean; ResetModifiedFlag:boolean=false);
begin
  FSaneClient.SaveOptions(SaveAll, ResetModifiedFlag);
end;

procedure TScanner.SetOptionValue(OptionName, Value:string);
begin
  FSaneClient.SetOptionValue(OptionName, Value);
end;

procedure TScanner.SetOptionValue(OptionNr:integer; Value:string);
begin
  FSaneClient.SetOptionValue(OptionNr, Value);
end;

//DrawScanData
type
  TRGBX=packed record r,g,b,x:byte; end;
  PRGBXArray=^TRGBXArray;
  TRGBXArray=packed array[0..0] of TRGBX;

procedure DrawScanData(ScanData:TScanData; Bitmap:TBitmap);
var
  x, i: integer;
  NewWidth, NewHeight, BytesPerScanLine: integer;
  c:TRGBX;
  t:byte;
  rgb:TRGB;
  WordRGB:TWideRGB;
begin
  with ScanData do begin
    if ssNewScan in ScanData.ScanStates then begin
      with Frame do begin
        with Bitmap do begin
//          FreePixmap;
          FreeImage;
          if not IsHandScanner then
            NewHeight:=Lines
          else
            NewHeight:=1;
          NewWidth:=PixelsPerLine;
          PixelFormat:=pf32bit;
          Width:=NewWidth; Height:=NewHeight;
          Canvas.Brush.Color := clBlack;
          Canvas.FillRect(0,0,NewWidth,NewHeight);
//          Dormant;
        end;
      end;
    end;
    if ssLineCompleted in ScanStates then begin
      if IsHandScanner then
        Bitmap.Height:=Bitmap.Height+1;
//      PixelLine:=Bitmap.ScanLine[Line];
      with ScanSlice do begin
        case FrameType of
          ftGray1Bit  :
          begin
            for x:=0 to Pixels-1 do
              begin
                if (GrayBytes[x div 8] and (1 shl (7-(x mod 8))))<>0 then
                  Bitmap.Canvas.Pixels[x,Line] := clBlack
                else
                  Bitmap.Canvas.Pixels[x,Line] := clWhite;
             end;
          end;
          ftGray8Bit  :
          begin
            for x:=0 to Pixels-1 do begin
              t:=GrayBytes[x];
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(t,t,t);
            end;
          end;
          ftGray16Bit :
          begin
            for x:=0 to Pixels-1 do begin
              t:=GrayWords[x] shr 8;
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(t,t,t);
            end;
          end;
          ftRGB1Bit :
          begin
            for x:=0 to Pixels - 1 do begin
              rgb:=RGBPixel[x div 8];
              if (rgb.R shr (7 - (x mod 8))) <> 0 then c.r:=255 else c.r:=0;
              if (rgb.G shr (7 - (x mod 8))) <> 0 then c.g:=255 else c.g:=0;
              if (rgb.B shr (7 - (x mod 8))) <> 0 then c.b:=255 else c.b:=0;
              c.x:=0;
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(c.r,c.g,c.b);
            end;
          end;
          ftRGB8Bit :
          begin
            for x:=0 to Pixels-1 do begin
              rgb:=RGBPixel[x];
              c.r:=rgb.r;
              c.g:=rgb.g;
              c.b:=rgb.b;
              c.x:=0;
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(c.r,c.g,c.b);
            end;
          end;
          ftRGB16Bit :
          begin
            for x:=0 to Pixels-1 do begin
              WordRGB:=WideRGBPixel[x];
              c.r:=WordRGB.r shr 8;
              c.g:=WordRGB.g shr 8;
              c.b:=WordRGB.b shr 8;
              c.x:=0;
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(c.r,c.g,c.b);
            end;
          end;
          ftRed1Bit, ftGreen1Bit, ftBlue1Bit :
          begin
            for x:=0 to Pixels - 1 do begin
              t:=GrayBytes[x div 8];
//              c:=PixelLine[x];
              case FrameType of
                ftRed1Bit : if (t shr (7 - (x mod 8))) <> 0 then c.r:=255 else c.r:=0;
                ftGreen1Bit : if (t shr (7 - (x mod 8))) <> 0 then c.g:=255 else c.g:=0;
                ftBlue1Bit : if (t shr (7 - (x mod 8))) <> 0 then c.b:=255 else c.b:=0;
              end;
              c.x:=0;
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(c.r,c.g,c.b);
            end;
          end;
          ftRed8Bit, ftGreen8Bit, ftBlue8Bit :
          begin
            for x:=0 to Pixels-1 do begin
              t:=GrayBytes[x];
//              c:=PixelLine[x];
              case FrameType of
                ftRed8Bit : c.r:=t;
                ftGreen8Bit : c.g:=t;
                ftBlue8Bit : c.b:=t;
              end;
              c.x:=0;
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(c.r,c.g,c.b);
            end;
          end;
          ftRed16Bit, ftBlue16Bit, ftGreen16Bit :
          begin
            for x:=0 to Pixels-1 do begin
              t:=GrayWords[x];
//              c:=PixelLine[x];
              case FrameType of
                ftRed16Bit : c.r:=t shr 8;
                ftGreen16Bit : c.g:=t shr 8;
                ftBlue16Bit : c.b:=t shr 8;
              end;
              c.x:=0;
              Bitmap.Canvas.Pixels[x,Line] := RGBToColor(c.r,c.g,c.b);
            end;
          end;
        else
          raise
            Exception.Create('Unknown frame type');
        end;
      end;
    end;
  end;
end;

//Register-Prozedur
procedure Register;
begin
  RegisterComponents('System', [TScanner]);
end;

end.
